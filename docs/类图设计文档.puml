@startuml
class APIResponse<T> {
  + setCode(int): void // 设置响应码
  + getCode(): int // 获取响应码
  + hashCode(): int // 生成对象的哈希码
  + getMsg(): String // 获取消息
  + getData(): T // 获取数据
  + getTrace(): String // 获取追踪信息
  + getTimestamp(): long // 获取时间戳
  + setMsg(String): void // 设置消息
  + setData(T): void // 设置数据
  + setTrace(String): void // 设置追踪信息
  # canEqual(Object): boolean // 判断是否可以比较
  + setTimestamp(long): void // 设置时间戳
  + equals(Object): boolean // 判断对象是否相等
  + toString(): String // 返回对象的字符串表示
}
annotation Access << annotation >> {
  + level(): AccessLevel // 获取访问级别
}
class AccessInterceptor {
  + preHandle(HttpServletRequest, HttpServletResponse, Object): boolean // 请求处理前操作
  + writeResponse(HttpServletResponse, APIResponse): void // 写响应
  + afterCompletion(HttpServletRequest, HttpServletResponse, Object, Exception): void // 请求完成后操作
  + setOpLogService(OpLogService): void // 设置操作日志服务
  + setUserService(UserService): void // 设置用户服务
  + postHandle(HttpServletRequest, HttpServletResponse, Object, ModelAndView): void // 请求处理后操作
}
enum AccessLevel << enumeration >> {
  + getMsg(): String // 获取消息
  + getCode(): int // 获取代码
  + values(): AccessLevel[] // 获取所有枚举值
  + valueOf(String): AccessLevel // 根据名称获取枚举值
}
class Ad {
  + getImageFile(): MultipartFile // 获取图片文件
  + getId(): Long // 获取广告ID
  + getImage(): String // 获取图片URL
  + getLink(): String // 获取链接
  + getCreateTime(): String // 获取创建时间
  + hashCode(): int // 生成对象的哈希码
  + setId(Long): void // 设置广告ID
  + setImage(String): void // 设置图片URL
  + setImageFile(MultipartFile): void // 设置图片文件
  + setLink(String): void // 设置链接
  + setCreateTime(String): void // 设置创建时间
  + equals(Object): boolean // 判断对象是否相等
  # canEqual(Object): boolean // 判断是否可以比较
  + toString(): String // 返回对象的字符串表示
}
class AdController {
  + list(): APIResponse // 列出所有广告
  + delete(String): APIResponse // 删除广告
  + update(Ad): APIResponse // 更新广告
  + saveAd(Ad): String // 保存广告
  + create(Ad): APIResponse // 创建广告
}
interface AdService << interface >> {
  + deleteAd(String): void // 删除广告
  + getAdList(): List<Ad> // 获取广告列表
  + updateAd(Ad): void // 更新广告
  + createAd(Ad): void // 创建广告
}
class AdServiceImpl {
  + updateAd(Ad): void // 更新广告
  + deleteAd(String): void // 删除广告
  + getAdList(): List<Ad> // 获取广告列表
  + createAd(Ad): void // 创建广告
}
class Address {
  + setName(String): void // 设置名称
  + getMobile(): String // 获取手机号码
  + getId(): Long // 获取地址ID
  + getName(): String // 获取名称
  + getDescription(): String // 获取描述
  + getDef(): String // 获取默认地址标志
  + getCreateTime(): String // 获取创建时间
  + equals(Object): boolean // 判断对象是否相等
  # canEqual(Object): boolean // 判断是否可以比较
  + getUserId(): String // 获取用户ID
  + setDef(String): void // 设置默认地址标志
  + setDescription(String): void // 设置描述
  + hashCode(): int // 生成对象的哈希码
  + setCreateTime(String): void // 设置创建时间
  + setId(Long): void // 设置地址ID
  + setMobile(String): void // 设置手机号码
  + setUserId(String): void // 设置用户ID
  + toString(): String // 返回对象的字符串表示
}
class AddressController {
  + delete(String): APIResponse // 删除地址
  + list(String): APIResponse // 列出所有地址
  + create(Address): APIResponse // 创建地址
  + update(Address): APIResponse // 更新地址
}
interface AddressMapper << interface >>
interface AddressService << interface >> {
  + getAddressList(String): List<Address> // 获取地址列表
  + deleteAddress(String): void // 删除地址
  + createAddress(Address): void // 创建地址
  + updateAddress(Address): void // 更新地址
}
class AddressServiceImpl {
  + createAddress(Address): void // 创建地址
  + deleteAddress(String): void // 删除地址
  + updateAddress(Address): void // 更新地址
  + getAddressList(String): List<Address> // 获取地址列表
}
class Banner {
  + getThingId(): Long // 获取事物ID
  + getId(): Long // 获取Banner ID
  # canEqual(Object): boolean // 判断是否可以比较
  + getImage(): String // 获取图片URL
  + getImageFile(): MultipartFile // 获取图片文件
  + getCreateTime(): String // 获取创建时间
  + setId(Long): void // 设置Banner ID
  + hashCode(): int // 生成对象的哈希码
  + toString(): String // 返回对象的字符串表示
  + setImage(String): void // 设置图片URL
  + setImageFile(MultipartFile): void // 设置图片文件
  + setThingId(Long): void // 设置事物ID
  + setCreateTime(String): void // 设置创建时间
  + equals(Object): boolean // 判断对象是否相等
}
class BannerController {
  + saveBanner(Banner): String // 保存Banner
  + create(Banner): APIResponse // 创建Banner
  + list(): APIResponse // 列出所有Banner
  + delete(String): APIResponse // 删除Banner
  + update(Banner): APIResponse // 更新Banner
}
interface BannerMapper << interface >>
interface BannerService << interface >> {
  + deleteBanner(String): void // 删除Banner
  + updateBanner(Banner): void // 更新Banner
  + getBannerList(): List<Banner> // 获取Banner列表
  + createBanner(Banner): void // 创建Banner
}
class BannerServiceImpl {
  + createBanner(Banner): void // 创建Banner
  + updateBanner(Banner): void // 更新Banner
  + getBannerList(): List<Banner> // 获取Banner列表
  + deleteBanner(String): void // 删除Banner
}
class Classification {
  + getId(): Long // 获取分类ID
  + getTitle(): String // 获取标题
  + getCreateTime(): String // 获取创建时间
  + setId(Long): void // 设置分类ID
  + setTitle(String): void // 设置标题
  + setCreateTime(String): void // 设置创建时间
  + equals(Object): boolean // 判断对象是否相等
  # canEqual(Object): boolean // 判断是否可以比较
  + hashCode(): int // 生成对象的哈希码
  + toString(): String // 返回对象的字符串表示
}
class ClassificationController {
  + list(): APIResponse // 列出所有分类
  + create(Classification): APIResponse // 创建分类
  + update(Classification): APIResponse // 更新分类
  + delete(String): APIResponse // 删除分类
}
interface ClassificationMapper << interface >>
interface ClassificationService << interface >> {
  + getClassificationList(): List<Classification> // 获取分类列表
  + updateClassification(Classification): void // 更新分类
  + deleteClassification(String): void // 删除分类
  + createClassification(Classification): void // 创建分类
}
class ClassificationServiceImpl {
  + deleteClassification(String): void // 删除分类
  + getClassificationList(): List<Classification> // 获取分类列表
  + createClassification(Classification): void // 创建分类
  + updateClassification(Classification): void // 更新分类
}
class Comment {
  + getCommentTime(): String // 获取评论时间
  + getId(): Long // 获取评论ID
  + getContent(): String // 获取评论内容
  + setContent(String): void // 设置评论内容
  + setLikeCount(String): void // 设置点赞数量
  + getLikeCount(): String // 获取点赞数量
  + setCommentTime(String): void // 设置评论时间
  + setUsername(String): void // 设置用户名
  # canEqual(Object): boolean // 判断是否可以比较
  + getUserId(): String // 获取用户ID
  + setThingId(String): void // 设置事物ID
  + getUsername(): String // 获取用户名
  + toString(): String // 返回对象的字符串表示
  + setTitle(String): void // 设置标题
  + getThingId(): String // 获取事物ID
  + getTitle(): String // 获取标题
  + setUserId(String): void // 设置用户ID
  + getCover(): String // 获取封面
  + equals(Object): boolean // 判断对象是否相等
  + setId(Long): void // 设置评论ID
  + setCover(String): void // 设置封面
  + hashCode(): int // 生成对象的哈希码
}
class CommentController {
  + delete(String): APIResponse // 删除评论
  + list(): APIResponse // 列出所有评论
  + listThingComments(String, String): APIResponse // 列出事物的所有评论
  + update(Comment): APIResponse // 更新评论
  + like(String): APIResponse // 点赞评论
  + listUserComments(String): APIResponse // 列出用户的所有评论
  + create(Comment): APIResponse // 创建评论
}
interface CommentMapper << interface >> {
  + getList(): List<Comment> // 获取评论列表
  + selectUserCommentList(String): List<Comment> // 选择用户评论列表
  + selectThingCommentList(String, String): List<Comment> // 选择事物评论列表
}
interface CommentService << interface >> {
  + updateComment(Comment): void // 更新评论
  + deleteComment(String): void // 删除评论
  + getCommentList(): List<Comment> // 获取评论列表
  + createComment(Comment): void // 创建评论
  + getCommentDetail(String): Comment // 获取评论详情
  + getUserCommentList(String): List<Comment> // 获取用户评论列表
  + getThingCommentList(String, String): List<Comment> // 获取事物评论列表
}
class CommentServiceImpl {
  + getCommentList(): List<Comment> // 获取评论列表
  + updateComment(Comment): void // 更新评论
  + getUserCommentList(String): List<Comment> // 获取用户评论列表
  + deleteComment(String): void // 删除评论
  + createComment(Comment): void // 创建评论
  + getCommentDetail(String): Comment // 获取评论详情
  + getThingCommentList(String, String): List<Comment> // 获取事物评论列表
}
class CustomExceptionHandler {
  + handleException(Exception): APIResponse // 处理异常
  - saveLog(Exception): void // 保存日志
}
class ErrorLog {
  + getIp(): String // 获取IP地址
  + getId(): Long // 获取日志ID
  + getUrl(): String // 获取URL
  + getMethod(): String // 获取方法
  + getContent(): String // 获取内容
  + hashCode(): int // 生成对象的哈希码
  + getLogTime(): String // 获取日志时间
  + setLogTime(String): void // 设置日志时间
  + setId(Long): void // 设置日志ID
  # canEqual(Object): boolean // 判断是否可以比较
  + setIp(String): void // 设置IP地址
  + setContent(String): void // 设置内容
  + setUrl(String): void // 设置URL
  + equals(Object): boolean // 判断对象是否相等
  + setMethod(String): void // 设置方法
  + toString(): String // 返回对象的字符串表示
}
class ErrorLogController {
  + list(): APIResponse // 列出所有错误日志
  + create(ErrorLog): APIResponse // 创建错误日志
  + delete(String): APIResponse // 删除错误日志
  + update(ErrorLog): APIResponse // 更新错误日志
}
interface ErrorLogMapper << interface >>
interface ErrorLogService << interface >> {
  + createErrorLog(ErrorLog): void // 创建错误日志
  + getErrorLogList(): List<ErrorLog> // 获取错误日志列表
  + deleteErrorLog(String): void // 删除错误日志
  + updateErrorLog(ErrorLog): void // 更新错误日志
}
class ErrorLogServiceImpl {
  + deleteErrorLog(String): void // 删除错误日志
  + getErrorLogList(): List<ErrorLog> // 获取错误日志列表
  + updateErrorLog(ErrorLog): void // 更新错误日志
  + createErrorLog(ErrorLog): void // 创建错误日志
}
class HttpContextUtils {
  + getParameterMap(HttpServletRequest): Map<String, String> // 获取请求参数映射
  + getDomain(): String // 获取域名
  + getHttpServletRequest(): HttpServletRequest? // 获取HTTP请求
  + getOrigin(): String // 获取请求来源
}
class IpUtils {
  + getIpAddr(HttpServletRequest): String // 获取IP地址
}
class JsonUtils {
  + parseObject(String, TypeReference<T>): T // 解析JSON字符串为对象
  + parseArray(String, Class<T>): List<T> // 解析JSON字符串为数组
  + parseObject(String, Class<T>): T? // 解析JSON字符串为对象
  + parseObject(byte[], Class<T>): T // 解析JSON字节数组为对象
  + toJsonString(Object): String // 将对象转为JSON字符串
}
class MyConfig {
  + addInterceptors(InterceptorRegistry): void // 添加拦截器
  + addCorsMappings(CorsRegistry): void // 添加跨域映射
}
class MySpringApplication {
  + main(String[]): void // 应用程序入口
}
class Notice {
  + getTitle(): String // 获取标题
  + getId(): Long // 获取通知ID
  + getContent(): String // 获取内容
  + getCreateTime(): String // 获取创建时间
  + setId(Long): void // 设置通知ID
  + setTitle(String): void // 设置标题
  + setContent(String): void // 设置内容
  + toString(): String // 返回对象的字符串表示
  + setCreateTime(String): void // 设置创建时间
  + equals(Object): boolean // 判断对象是否相等
  # canEqual(Object): boolean // 判断是否可以比较
  + hashCode(): int // 生成对象的哈希码
}
class NoticeController {
  + delete(String): APIResponse // 删除通知
  + create(Notice): APIResponse // 创建通知
  + list(): APIResponse // 列出所有通知
  + update(Notice): APIResponse // 更新通知
}
interface NoticeMapper << interface >>
interface NoticeService << interface >> {
  + getNoticeList(): List<Notice> // 获取通知列表
  + createNotice(Notice): void // 创建通知
  + updateNotice(Notice): void // 更新通知
  + deleteNotice(String): void // 删除通知
}
class NoticeServiceImpl {
  + getNoticeList(): List<Notice> // 获取通知列表
  + updateNotice(Notice): void // 更新通知
  + deleteNotice(String): void // 删除通知
  + createNotice(Notice): void // 创建通知
}
class OpLog {
  + getId(): Long // 获取日志ID
  + getReIp(): String // 获取IP地址
  + equals(Object): boolean // 判断对象是否相等
  + hashCode(): int // 生成对象的哈希码
  + getReTime(): String // 获取时间
  + setReUa(String): void // 设置用户代理
  + setReContent(String): void // 设置内容
  + setReUrl(String): void // 设置URL
  + getReUa(): String // 获取用户代理
  + getReUrl(): String // 获取URL
  + getReMethod(): String // 获取方法
  + setReTime(String): void // 设置时间
  # canEqual(Object): boolean // 判断是否可以比较
  + getReContent(): String // 获取内容
  + setAccessTime(String): void // 设置访问时间
  + getAccessTime(): String // 获取访问时间
  + toString(): String // 返回对象的字符串表示
  + setId(Long): void // 设置日志ID
  + setReMethod(String): void // 设置方法
  + setReIp(String): void // 设置IP地址
}
class OpLogController {
  + loginLogList(): APIResponse // 获取登录日志列表
  + create(OpLog): APIResponse // 创建操作日志
  + delete(String): APIResponse // 删除操作日志
  + list(): APIResponse // 获取操作日志列表
  + update(OpLog): APIResponse // 更新操作日志
}
interface OpLogMapper << interface >>
interface OpLogService << interface >> {
  + updateOpLog(OpLog): void // 更新操作日志
  + deleteOpLog(String): void // 删除操作日志
  + getOpLogList(): List<OpLog> // 获取操作日志列表
  + createOpLog(OpLog): void // 创建操作日志
  + getLoginLogList(): List<OpLog> // 获取登录日志列表
}
class OpLogServiceImpl {
  + getLoginLogList(): List<OpLog> // 获取登录日志列表
  + getOpLogList(): List<OpLog> // 获取操作日志列表
  + createOpLog(OpLog): void // 创建操作日志
  + updateOpLog(OpLog): void // 更新操作日志
  + deleteOpLog(String): void // 删除操作日志
}
class Order {
  + getStatus(): String // 获取订单状态
  + getId(): Long // 获取订单ID
  + setTitle(String): void // 设置标题
  + hashCode(): int // 生成对象的哈希码
  + getCover(): String // 获取封面
  + setUserId(String): void // 设置用户ID
  + getOrderTime(): String // 获取下单时间
  + getPayTime(): String // 获取支付时间
  + getThingId(): String // 获取事物ID
  + getReceiverPhone(): String // 获取接收者电话
  + getTitle(): String // 获取标题
  + setId(Long): void // 设置订单ID
  + toString(): String // 返回对象的字符串表示
  + setOrderNumber(String): void // 设置订单编号
  + setReceiverName(String): void // 设置接收者姓名
  + setOrderTime(String): void // 设置下单时间
  + setThingId(String): void // 设置事物ID
  + setCover(String): void // 设置封面
  + getUserId(): String // 获取用户ID
  + setPrice(String): void // 设置价格
  + setStatus(String): void // 设置状态
  + setPayTime(String): void // 设置支付时间
  + getCount(): String // 获取数量
  + setUsername(String): void // 设置用户名
  # canEqual(Object): boolean // 判断是否可以比较
  + getOrderNumber(): String // 获取订单编号
  + getRemark(): String // 获取备注
  + getUsername(): String // 获取用户名
  + setReceiverPhone(String): void // 设置接收者电话
  + equals(Object): boolean // 判断对象是否相等
  + getPrice(): String // 获取价格
  + getReceiverAddress(): String // 获取接收者地址
  + setReceiverAddress(String): void // 设置接收者地址
  + setCount(String): void // 设置数量
  + setRemark(String): void // 设置备注
  + getReceiverName(): String // 获取接收者姓名
}
class OrderController {
  + delete(String): APIResponse // 删除订单
  + cancelUserOrder(Long): APIResponse // 取消用户订单
  + cancelOrder(Long): APIResponse // 取消订单
  + create(Order): APIResponse // 创建订单
  + update(Order): APIResponse // 更新订单
  + userOrderList(String, String): APIResponse // 获取用户订单列表
  + list(): APIResponse // 获取订单列表
}
interface OrderMapper << interface >> {
  + getList(): List<Order> // 获取订单列表
  + getUserOrderList(String, String): List<Order> // 获取用户订单列表
}
interface OrderService << interface >> {
  + getOrderList(): List<Order> // 获取订单列表
  + createOrder(Order): void // 创建订单
  + deleteOrder(String): void // 删除订单
  + getUserOrderList(String, String): List<Order> // 获取用户订单列表
  + updateOrder(Order): void // 更新订单
}
class OrderServiceImpl {
  + deleteOrder(String): void // 删除订单
  + createOrder(Order): void // 创建订单
  + getOrderList(): List<Order> // 获取订单列表
  + updateOrder(Order): void // 更新订单
  + getUserOrderList(String, String): List<Order> // 获取用户订单列表
}
class OverViewController {
  + getSevenDate(): List<String> // 获取最近七天日期
  + sysInfo(): APIResponse // 获取系统信息
  + count(): APIResponse // 获取统计信息
}
interface OverviewMapper << interface >> {
  + getPopularClassification(): List<Object> // 获取热门分类
  + getPopularThing(): List<Object> // 获取热门事物
  + getWebVisitData(String): List<VisitData> // 获取网站访问数据
}
enum ResponeCode << enumeration >> {
  + values(): ResponeCode[] // 获取所有响应代码
  + valueOf(String): ResponeCode // 根据名称获取响应代码
  + getMsg(): String // 获取消息
  + getCode(): int // 获取代码
}
class Tag {
  + setId(Long): void // 设置标签ID
  + getId(): Long // 获取标签ID
  + getTitle(): String // 获取标题
  + getCreateTime(): String // 获取创建时间
  + setTitle(String): void // 设置标题
  + setCreateTime(String): void // 设置创建时间
  + equals(Object): boolean // 判断对象是否相等
  # canEqual(Object): boolean // 判断是否可以比较
  + hashCode(): int // 生成对象的哈希码
  + toString(): String // 返回对象的字符串表示
}
class TagController {
  + list(): APIResponse // 列出所有标签
  + delete(String): APIResponse // 删除标签
  + update(Tag): APIResponse // 更新标签
  + create(Tag): APIResponse // 创建标签
}
interface TagMapper << interface >>
interface TagService << interface >> {
  + getTagList(): List<Tag> // 获取标签列表
  + deleteTag(String): void // 删除标签
  + updateTag(Tag): void // 更新标签
  + createTag(Tag): void // 创建标签
}
class TagServiceImpl {
  + getTagList(): List<Tag> // 获取标签列表
  + deleteTag(String): void // 删除标签
  + createTag(Tag): void // 创建标签
  + updateTag(Tag): void // 更新标签
}
class TestUtils
class Thing {
  + getLocation(): String // 获取位置
  + getPrice(): String // 获取价格
  + getId(): Long // 获取事物ID
  + getTitle(): String // 获取标题
  + setPrice(String): void // 设置价格
  + setStatus(String): void // 设置状态
  + getCover(): String // 获取封面
  + getAge(): String // 获取年龄
  + setAge(String): void // 设置年龄
  + setSex(String): void // 设置性别
  + getDescription(): String // 获取描述
  + setClassificationId(Long): void // 设置分类ID
  + equals(Object): boolean // 判断对象是否相等
  + getPv(): String // 获取浏览量
  + getCollectCount(): String // 获取收藏数量
  + setCollectCount(String): void // 设置收藏数量
  + getStatus(): String // 获取状态
  + getCreateTime(): String // 获取创建时间
  + setMobile(String): void // 设置手机
  + setWishCount(String): void // 设置心愿数量
  + setId(Long): void // 设置事物ID
  + setImageFile(MultipartFile): void // 设置图片文件
  + getTags(): List<Long> // 获取标签列表
  + setCreateTime(String): void // 设置创建时间
  + getUserId(): String // 获取用户ID
  + toString(): String // 返回对象的字符串表示
  + setLocation(String): void // 设置位置
  + getImageFile(): MultipartFile // 获取图片文件
  + getSex(): String // 获取性别
  + setUserId(String): void // 设置用户ID
  + setTitle(String): void // 设置标题
  + setRecommendCount(String): void // 设置推荐数量
  + getRecommendCount(): String // 获取推荐数量
  + setCover(String): void // 设置封面
  + setScore(String): void // 设置评分
  + setTags(List<Long>): void // 设置标签列表
  + getClassificationId(): Long // 获取分类ID
  + getScore(): String // 获取评分
  + hashCode(): int // 生成对象的哈希码
  + getWishCount(): String // 获取心愿数量
  + getMobile(): String // 获取手机
  # canEqual(Object): boolean // 判断是否可以比较
  + setPv(String): void // 设置浏览量
  + setDescription(String): void // 设置描述
}
class ThingCollect {
  + getThingId(): String // 获取事物ID
  + getId(): Long // 获取收藏ID
  + getUserId(): String // 获取用户ID
  + setId(Long): void // 设置收藏ID
  + setThingId(String): void // 设置事物ID
  + setUserId(String): void // 设置用户ID
  + equals(Object): boolean // 判断对象是否相等
  # canEqual(Object): boolean // 判断是否可以比较
  + hashCode(): int // 生成对象的哈希码
  + toString(): String // 返回对象的字符串表示
}
class ThingCollectController {
  + unCollect(String): APIResponse // 取消收藏
  + getUserCollectList(String): APIResponse // 获取用户收藏列表
  + collect(ThingCollect): APIResponse // 收藏事物
}
interface ThingCollectMapper << interface >> {
  + getThingCollectList(String): List<Map> // 获取事物收藏列表
}
interface ThingCollectService << interface >> {
  + getThingCollectList(String): List<Map> // 获取事物收藏列表
  + createThingCollect(ThingCollect): void // 创建事物收藏
  + deleteThingCollect(String): void // 删除事物收藏
  + getThingCollect(String, String): ThingCollect // 获取事物收藏
}
class ThingCollectServiceImpl {
  + deleteThingCollect(String): void // 删除事物收藏
  + createThingCollect(ThingCollect): void // 创建事物收藏
  + getThingCollectList(String): List<Map> // 获取事物收藏列表
  + getThingCollect(String, String): ThingCollect // 获取事物收藏
}
class ThingController {
  + saveThing(Thing): String // 保存事物
  + listUserThing(String): APIResponse // 获取用户事物列表
  + create(Thing): APIResponse // 创建事物
  + delete(String): APIResponse // 删除事物
  + list(String, String, String, String): APIResponse // 获取事物列表
  + detail(String): APIResponse // 获取事物详情
  + update(Thing): APIResponse // 更新事物
}
interface ThingMapper << interface >>
interface ThingService << interface >> {
  + getUserThing(String): List<Thing> // 获取用户事物列表
  + getThingById(String): Thing // 根据ID获取事物
  + updateThing(Thing): void // 更新事物
  + createThing(Thing): void // 创建事物
  + getThingList(String, String, String, String): List<Thing> // 获取事物列表
  + deleteThing(String): void // 删除事物
  + addWishCount(String): void // 增加心愿数量
  + addCollectCount(String): void // 增加收藏数量
}
class ThingServiceImpl {
  + getUserThing(String): List<Thing> // 获取用户事物列表
  + setThingTags(Thing): void // 设置事物标签
  + addWishCount(String): void // 增加心愿数量
  + createThing(Thing): void // 创建事物
  + deleteThing(String): void // 删除事物
  + updateThing(Thing): void // 更新事物
  + addCollectCount(String): void // 增加收藏数量
  + getThingList(String, String, String, String): List<Thing> // 获取事物列表
  + getThingById(String): Thing // 根据ID获取事物
}
class ThingTag {
  + setThingId(Long): void // 设置事物ID
  + getId(): Long // 获取标签ID
  + getThingId(): Long // 获取事物ID
  + getTagId(): Long // 获取标签ID
  + setId(Long): void // 设置标签ID
  + setTagId(Long): void // 设置标签ID
  + equals(Object): boolean // 判断对象是否相等
  # canEqual(Object): boolean // 判断是否可以比较
  + hashCode(): int // 生成对象的哈希码
  + toString(): String // 返回对象的字符串表示
}
interface ThingTagMapper << interface >>
class ThingWish {
  + getId(): Long // 获取心愿ID
  + getThingId(): String // 获取事物ID
  + getUserId(): String // 获取用户ID
  + setId(Long): void // 设置心愿ID
  + setThingId(String): void // 设置事物ID
  + setUserId(String): void // 设置用户ID
  + equals(Object): boolean // 判断对象是否相等
  # canEqual(Object): boolean // 判断是否可以比较
  + hashCode(): int // 生成对象的哈希码
  + toString(): String // 返回对象的字符串表示
}
class ThingWishController {
  + getUserWishList(String): APIResponse // 获取用户心愿列表
  + unWish(String): APIResponse // 取消心愿
  + wish(ThingWish): APIResponse // 添加心愿
}
interface ThingWishMapper << interface >> {
  + getThingWishList(String): List<Map> // 获取事物心愿列表
}
interface ThingWishService << interface >> {
  + createThingWish(ThingWish): void // 创建事物心愿
  + getThingWish(String, String): ThingWish // 获取事物心愿
  + getThingWishList(String): List<Map> // 获取事物心愿列表
  + deleteThingWish(String): void // 删除事物心愿
}
class ThingWishServiceImpl {
  + getThingWishList(String): List<Map> // 获取事物心愿列表
  + getThingWish(String, String): ThingWish // 获取事物心愿
  + deleteThingWish(String): void // 删除事物心愿
  + createThingWish(ThingWish): void // 创建事物心愿
}
class User {
  + getToken(): String // 获取令牌
  + getPassword(): String // 获取密码
  + getId(): String // 获取用户ID
  + getScore(): String // 获取评分
  + setRole(String): void // 设置角色
  + getAvatarFile(): MultipartFile // 获取头像文件
  + setAvatarFile(MultipartFile): void // 设置头像文件
  + setPushSwitch(String): void // 设置推送开关
  + setPushEmail(String): void // 设置推送邮件
  + setEmail(String): void // 设置电子邮件
  + setToken(String): void // 设置令牌
  + setUsername(String): void // 设置用户名
  + getUsername(): String // 获取用户名
  + getRePassword(): String // 获取重复密码
  + getPushEmail(): String // 获取推送邮件
  + setMobile(String): void // 设置手机号
  + setNickname(String): void // 设置昵称
  + getNickname(): String // 获取昵称
  + setScore(String): void // 设置评分
  + getCreateTime(): String // 获取创建时间
  + hashCode(): int // 生成对象的哈希码
  + setId(String): void // 设置用户ID
  + getStatus(): String // 获取状态
  + toString(): String // 返回对象的字符串表示
  + setPassword(String): void // 设置密码
  + setDescription(String): void // 设置描述
  + setStatus(String): void // 设置状态
  # canEqual(Object): boolean // 判断是否可以比较
  + setCreateTime(String): void // 设置创建时间
  + equals(Object): boolean // 判断对象是否相等
  + setAvatar(String): void // 设置头像
  + getMobile(): String // 获取手机号
  + getEmail(): String // 获取电子邮件
  + getDescription(): String // 获取描述
  + setRePassword(String): void // 设置重复密码
  + getRole(): String // 获取角色
  + getAvatar(): String // 获取头像
  + getPushSwitch(): String // 获取推送开关
}
class UserController {
  + userLogin(User): APIResponse // 用户登录
  + delete(String): APIResponse // 删除用户
  + updateUserInfo(User): APIResponse // 更新用户信息
  + saveAvatar(User): String // 保存头像
  + detail(String): APIResponse // 获取用户详情
  + login(User): APIResponse // 登录
  + create(User): APIResponse // 创建用户
  + updatePwd(String, String, String): APIResponse // 更新密码
  + list(String): APIResponse // 获取用户列表
  + update(User): APIResponse // 更新用户
  + userRegister(User): APIResponse // 用户注册
}
interface UserMapper << interface >>
interface UserService << interface >> {
  + getUserByUserName(String): User // 根据用户名获取用户
  + updateUser(User): void // 更新用户
  + getUserByToken(String): User // 根据令牌获取用户
  + getUserList(String): List<User> // 获取用户列表
  + createUser(User): void // 创建用户
  + deleteUser(String): void // 删除用户
  + getAdminUser(User): User // 获取管理员用户
  + getNormalUser(User): User // 获取普通用户
  + getUserDetail(String): User // 获取用户详情
}
class UserServiceImpl {
  + getAdminUser(User): User // 获取管理员用户
  + deleteUser(String): void // 删除用户
  + getUserByUserName(String): User // 根据用户名获取用户
  + getNormalUser(User): User // 获取普通用户
  + getUserByToken(String): User // 根据令牌获取用户
  + createUser(User): void // 创建用户
  + getUserDetail(String): User // 获取用户详情
  + updateUser(User): void // 更新用户
  + getUserList(String): List<User> // 获取用户列表
}
class VisitData
AccessInterceptor          -[#595959,dashed]->  OpLog                     : "«create»"
AccessInterceptor         "1" *-[#595959,plain]-> "service\n1" OpLogService
AccessInterceptor         "1" *-[#595959,plain]-> "userService\n1" UserService
AdController               -[#595959,dashed]->  APIResponse               : "«create»"
AdController              "1" *-[#595959,plain]-> "service\n1" AdService
AdServiceImpl             "1" *-[#595959,plain]-> "mapper\n1" AdMapper
AdServiceImpl              -[#008200,dashed]-^  AdService
AddressController          -[#595959,dashed]->  APIResponse               : "«create»"
AddressController         "1" *-[#595959,plain]-> "service\n1" AddressService
AddressServiceImpl        "1" *-[#595959,plain]-> "mapper\n1" AddressMapper
AddressServiceImpl         -[#008200,dashed]-^  AddressService
BannerController           -[#595959,dashed]->  APIResponse               : "«create»"
BannerController          "1" *-[#595959,plain]-> "service\n1" BannerService
BannerServiceImpl         "1" *-[#595959,plain]-> "mapper\n1" BannerMapper
BannerServiceImpl          -[#008200,dashed]-^  BannerService
ClassificationController   -[#595959,dashed]->  APIResponse               : "«create»"
ClassificationController  "1" *-[#595959,plain]-> "service\n1" ClassificationService
ClassificationServiceImpl "1" *-[#595959,plain]-> "mapper\n1" ClassificationMapper
ClassificationServiceImpl  -[#008200,dashed]-^  ClassificationService
CommentController          -[#595959,dashed]->  APIResponse               : "«create»"
CommentController         "1" *-[#595959,plain]-> "service\n1" CommentService
CommentServiceImpl        "1" *-[#595959,plain]-> "mapper\n1" CommentMapper
CommentServiceImpl         -[#008200,dashed]-^  CommentService
CustomExceptionHandler     -[#595959,dashed]->  APIResponse               : "«create»"
CustomExceptionHandler     -[#595959,dashed]->  ErrorLog                  : "«create»"
CustomExceptionHandler    "1" *-[#595959,plain]-> "service\n1" ErrorLogService
ErrorLogController         -[#595959,dashed]->  APIResponse               : "«create»"
ErrorLogController        "1" *-[#595959,plain]-> "service\n1" ErrorLogService
ErrorLogServiceImpl       "1" *-[#595959,plain]-> "mapper\n1" ErrorLogMapper
ErrorLogServiceImpl        -[#008200,dashed]-^  ErrorLogService
MyConfig                   -[#595959,dashed]->  AccessInterceptor         : "«create»"
NoticeController           -[#595959,dashed]->  APIResponse               : "«create»"
NoticeController          "1" *-[#595959,plain]-> "service\n1" NoticeService
NoticeServiceImpl         "1" *-[#595959,plain]-> "mapper\n1" NoticeMapper
NoticeServiceImpl          -[#008200,dashed]-^  NoticeService
OpLogController            -[#595959,dashed]->  APIResponse               : "«create»"
OpLogController           "1" *-[#595959,plain]-> "service\n1" OpLogService
OpLogServiceImpl          "1" *-[#595959,plain]-> "mapper\n1" OpLogMapper
OpLogServiceImpl           -[#008200,dashed]-^  OpLogService
OrderController            -[#595959,dashed]->  APIResponse               : "«create»"
OrderController            -[#595959,dashed]->  Order                     : "«create»"
OrderController           "1" *-[#595959,plain]-> "service\n1" OrderService
OrderServiceImpl          "1" *-[#595959,plain]-> "mapper\n1" OrderMapper
OrderServiceImpl           -[#008200,dashed]-^  OrderService
OverViewController         -[#595959,dashed]->  APIResponse               : "«create»"
OverViewController        "1" *-[#595959,plain]-> "orderMapper\n1" OrderMapper
OverViewController        "1" *-[#595959,plain]-> "overviewMapper\n1" OverviewMapper
OverViewController        "1" *-[#595959,plain]-> "thingMapper\n1" ThingMapper
TagController              -[#595959,dashed]->  APIResponse               : "«create»"
TagController             "1" *-[#595959,plain]-> "service\n1" TagService
TagServiceImpl            "1" *-[#595959,plain]-> "mapper\n1" TagMapper
TagServiceImpl             -[#008200,dashed]-^  TagService
ThingCollectController     -[#595959,dashed]->  APIResponse               : "«create»"
ThingCollectController    "1" *-[#595959,plain]-> "thingCollectService\n1" ThingCollectService
ThingCollectController    "1" *-[#595959,plain]-> "thingService\n1" ThingService
ThingCollectServiceImpl   "1" *-[#595959,plain]-> "mapper\n1" ThingCollectMapper
ThingCollectServiceImpl    -[#008200,dashed]-^  ThingCollectService
ThingController            -[#595959,dashed]->  APIResponse               : "«create»"
ThingController           "1" *-[#595959,plain]-> "service\n1" ThingService
ThingServiceImpl          "1" *-[#595959,plain]-> "mapper\n1" ThingMapper
ThingServiceImpl           -[#008200,dashed]-^  ThingService
ThingServiceImpl           -[#595959,dashed]->  ThingTag                  : "«create»"
ThingServiceImpl          "1" *-[#595959,plain]-> "thingTagMapper\n1" ThingTagMapper
ThingWishController        -[#595959,dashed]->  APIResponse               : "«create»"
ThingWishController       "1" *-[#595959,plain]-> "thingService\n1" ThingService
ThingWishController       "1" *-[#595959,plain]-> "thingWishService\n1" ThingWishService
ThingWishServiceImpl      "1" *-[#595959,plain]-> "mapper\n1" ThingWishMapper
ThingWishServiceImpl       -[#008200,dashed]-^  ThingWishService
UserController             -[#595959,dashed]->  APIResponse               : "«create»"
UserController            "1" *-[#595959,plain]-> "userService\n1" UserService
UserServiceImpl           "1" *-[#595959,plain]-> "userMapper\n1" UserMapper
UserServiceImpl            -[#008200,dashed]-^  UserService
@enduml